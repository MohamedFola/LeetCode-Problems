Binary Search:

NOTE: you need to take care of the constraints of the problem as it is the key of solving the problem in this way.

- 1 <= n <= 10pow5
- nums.length == n + 1
- 1 <= nums[i] <= n
- All the integers in nums appear only once except for precisely one integer which appears two or more times.

for better understand let's take an example -> if nums length is 5 then the only allowed numbers are from 1 to 4
nums = {4, 2, 1, 1, 3} for example.

1) do binary search for range 1:n 
2) get the middle of the numbers
3) count the numbers that are less than the middle of the numbers if they exceed the middle then the duplicated numbers is less than the middle
4) if the count is more than the middle then search for the duplicated number in the numbers less than the middle
5) if the count is less than the middle then search for the duplicated number in the numbers more than the middle

example:
vector = 5 2 3 3 1 4

first loop:
left = 1
right = size of vector - 1 = 5

range of search is 1:5

mid = 1 + ( 5 - 1 ) / 2 = 3

numbers less than or equal to mid are = 2 3 3 1 so count = 4

count = 4 > mid -> therefore the duplicated number is from range 1 to 3

second loop:
left = 1
right = pervouis mid = 3

range of search is 1:3

mid = 1 + ( 3 - 1 ) / 2 = 2

numbers less than or equal to mid are = 1 so count = 1

count = 1 < mid -> therefore the duplicated number is from range 2 to 3

third loop:
left = 3
right = 3

at this point left is not less than right so the loop will exit and we will return 3