Floyed's Algorithm:

at thie approach we deal with the array as a linked list 
so we need to detect if the linked list is cyclic or not and of course in our case it will be cyclic as there is a number that is duplicated.

1) initialize the slow pointer and the fast pointer by head
2) move the slow pointer by one step and the fast pointer by two steps
3) once they meet at certain point get off the loop and move the slow pointer back to the head
4) move the slow pointer and the fast pointer by one step and they will meet at the duplicated number

example:
         0 1 2 3 4 5
vector = 5 2 3 3 1 4

first loop:
slow = nums[5] = 4
fast = nums[nums[5]] = 1

second loop:
slow = nums[4] = 1
fast = nums[nums[1]] = 3

third loop:
slow = nums[1] = 2
fast = nums[nums[3]] = 3

fourth loop:
slow = nums[2] = 3
fast = nums[nums[3]] = 3

now slow and fast are equal
move slow to the head again
slow = 5

start another loop where slow and fast moving by one step

first loop:
slow = nums[5] = 4
fast = nums[3] = 3

second loop:
slow = nums[4] = 1
fast = nums[3] = 3

third loop:
slow = nums[1] = 2
fast = nums[3] = 3

fourth loop:
slow = nums[2] = 3
fast = nums[3] = 3

now slow and fast meet at the duplicated number