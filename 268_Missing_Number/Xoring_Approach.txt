Xoring Approach:the main idea here is that xoring anything by itself will give 0 and xoring anything with 0 will give the same numberfor example: a ^ a = 0a ^ 0 = aalso when xoring more than two elements the duplicated elements will cancel each other and will have no effect to the operation.for example:a ^ a ^ b ^ b ^ c = c -> a xoring a gives 0 && b xoring b gives 0 and && xoring these two zeros with c will give c1) xor all elements from 1 to n - 1 where n is the size of the vector2) loop to all elements of the vector and xor each element with the value resulted from the pervouis step3) all duplicated elements will cancel each other and the remaining number will be the number that is not found in the vector but from range 0 to n - 1example:vector = [3,0,2] the missing element is 1xor elements from 1 to 3 -> res = 1 ^ 2 ^ 3loop 1:xor 3 with res will cancel 3 from res -> res = 1 ^ 2 ^ 3 ^ 3 = 1 ^ 2loop 2:xor 0 with res will give the same result -> res = 1 ^ 2 ^ 0 = 1 ^ 2loop 3:xor 2 with res will cancel 2 from res -> res = 1 ^ 2 ^ 2 = 1then return the result which is 1